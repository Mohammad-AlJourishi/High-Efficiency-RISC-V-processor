// LUI
  module lui_instruction (
  input clk,
  input [6:0] opcode,
  input [19:0] imm, // Corrected to 20-bit immediate
  output reg [31:0] rd // Corrected to 32-bit register
);

  always @(negedge clk) begin
    if (opcode == 7'b0110111) begin // Corrected opcode for LUI
      rd = {imm, 12'b0}; // Set the upper 20 bits of the register based on the immediate value
    end
  end
endmodule





`timescale 1ns / 1ps

module lui_instruction_tb;

  // Inputs
  reg clk;
  reg [6:0] opcode;
  reg [19:0] imm; // Corrected to 20-bit immediate

  // Outputs
  wire [31:0] rd;

  // Instantiate the Unit Under Test (UUT)
  lui_instruction uut (
    .clk(clk),
    .opcode(opcode),
    .imm(imm),
    .rd(rd)
  );

  // Clock generation
  initial begin
    clk = 0;
    forever #10 clk = ~clk; // Clock with a period of 20ns
  end

  // Test sequence
  initial begin
    // Initialize Inputs
    opcode = 7'b0110111; // Opcode for LUI
    imm = 20'hABCDE; // Example 20-bit immediate value

    // Wait for the negative edge of the clock
    @(negedge clk);
    #20; // Additional delay to observe the change in output

    // Change the immediate value for another test case
    imm = 20'h12345; // Another example 20-bit immediate value

    // Wait for the negative edge of the clock
    @(negedge clk);
    #20; // Additional delay to observe the change in output

    // Finish the simulation
    $finish;
  end

  // Monitor changes
  initial begin
    $monitor("Time = %t, opcode = %b, imm = %h, rd = %h",
              $time, opcode, imm, rd);
  end

endmodule
