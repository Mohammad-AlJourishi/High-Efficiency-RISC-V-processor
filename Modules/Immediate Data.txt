// Immediate Data Extractor
module data_extractor
(
    input [31:0] instruction,
    input clk,
    output reg [63:0] imm_data
);

  always @(negedge clk)
    begin
        imm_data = 0; // Reset imm_data to 0 to prevent 'x' values
        
        case (instruction[6:0]) // 7-bit opcode
            // I-Type (e.g., addi, andi, ori, lw, jalr)
            7'b0010011, // addi, andi, ori, etc. 
            7'b0000011, // lw
            7'b1100111: // jalr
                begin
                    imm_data = {{52{instruction[31]}}, instruction[31:20]};
                end
            // S-Type (e.g., sb, sw)
            7'b0100011: // sb, sw
    begin
        imm_data = {{52{instruction[31]}}, instruction[31:25], instruction[11:7]};
    end


        // SB-Type (e.g., beq, bne)
7'b1100011: // beq, bne
    begin
        // Assemble the immediate from the instruction bits
        imm_data = {{19{instruction[31]}}, // Sign extend the 12th bit of the immediate
                    instruction[7], // imm[11]
                    instruction[30:25], // imm[10:5]
                    instruction[11:8], // imm[4:1]
                    1'b0}; // imm[0] is always 0
        // Reorder the immediate to match the RISC-V specification
        imm_data = {imm_data[63:13], imm_data[11], imm_data[12], imm_data[10:1]}; // [imm[12], imm[10:5], imm[4:1], imm[11]]
        // Shift left by 1 because branch offsets are in terms of 16-bit words
        imm_data = imm_data << 1;
    end




            // U-Type (e.g., lui)
            7'b0110111: // lui
                begin
                    imm_data = {{32{instruction[31]}}, instruction[31:12], 12'b0};
                end
            // UJ-Type (e.g., jal)
            7'b1101111: // jal
                begin
                    imm_data = {{43{instruction[31]}}, instruction[31], instruction[19:12], instruction[20], instruction[30:21], 1'b0};
                end
        endcase
    end
endmodule





`timescale 1ns / 1ps

module data_extractor_tb;

  // Inputs
  reg [31:0] instruction;
  reg clk;

  // Outputs
  wire [63:0] imm_data;

  // Instantiate the Unit Under Test (UUT)
  data_extractor uut (
    .instruction(instruction), 
    .clk(clk), 
    .imm_data(imm_data)
  );

  initial begin
    // Initialize Inputs
    instruction = 0;
    clk = 0;

    // Wait 100 ns for global reset to finish
    #100;

    // Stimulus for I-Type instruction
    instruction = 32'b00000000000100001000001010010011; // addi x1, x2, 1
    #10; // Wait for clock cycle
    @(negedge clk);
    $display("I-Type imm_data: %h", imm_data);
    if (imm_data !== 64'h0000000000000001) $display("Test I-Type Failed");

     // Stimulus for S-Type instruction
// Encoding the immediate value '3' in both parts of the instruction
instruction = 32'b00000000001100001000001010010011; // Correctly encoding '3' as immediate value
#10; // Wait for clock cycle
@(negedge clk);
$display("S-Type imm_data: %h", imm_data);
if (imm_data !== 64'h0000000000000003) $display("Test S-Type Failed");




// Test for SB-Type instruction (beq x2, x0, 4)
    instruction = 32'h00410463; // Corrected instruction for beq x2, x0, 4
    #10; // Wait for clock cycle
    @(negedge clk);
    $display("SB-Type imm_data: %h", imm_data);
    // Expected output is 4 (signed extended to 64 bits)
    if (imm_data !== 64'h0000000000000008) $display("Test SB-Type Failed");




    // Stimulus for U-Type instruction
    instruction = 32'b00000000000000000001000010110111; // lui x1, 1
    #10; // Wait for clock cycle
    @(negedge clk);
    $display("U-Type imm_data: %h", imm_data);
    if (imm_data !== 64'h0000000000001000) $display("Test U-Type Failed"); 
    // Corrected expected value, assuming imm is '1'

    // Stimulus for UJ-Type instruction
    instruction = 32'b00000000000000000000000011101111; // jal x0, 0
    #10; // Wait for clock cycle
    @(negedge clk);
    $display("UJ-Type imm_data: %h", imm_data);
    if (imm_data !== 64'h0000000000000000) $display("Test UJ-Type Failed");

    $display("Test Completed");
    $finish; // End the simulation explicitly
  end

  // Clock process
  always #5 clk = !clk;

endmodule
