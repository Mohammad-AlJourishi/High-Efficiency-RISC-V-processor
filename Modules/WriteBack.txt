module write_back (
    input clk,
    input [1:0] write_register,   // Address for write port
    input write_enable,           // Write enable signal
    input [7:0] write_data,       // Data to be written
    input reg_write,              // Control signal for register write
    input [7:0] alu_result,       // Result from ALU operation
    input [1:0] alu_destination,  // Address for ALU operation destination
    output reg [7:0] data_out     // Output data written to register file
);

    always @(negedge clk) begin
      if (write_enable && reg_write) begin
        // Check if the write register address matches the ALU destination address
        if (write_register == alu_destination) begin
          data_out = alu_result; // Write the ALU result to the data_out
        end else begin
          data_out = write_data; // Write the provided data to the data_out
        end
      end
    end
endmodule



`timescale 1ns / 1ps

module write_back_tb;

    // Inputs
    reg clk;
    reg [1:0] write_register;
    reg write_enable;
    reg [7:0] write_data;
    reg reg_write;
    reg [7:0] alu_result;
    reg [1:0] alu_destination;

    // Output
    wire [7:0] data_out;

    // Instantiate the Unit Under Test (UUT)
    write_back uut (
        .clk(clk),
        .write_register(write_register),
        .write_enable(write_enable),
        .write_data(write_data),
        .reg_write(reg_write),
        .alu_result(alu_result),
        .alu_destination(alu_destination),
        .data_out(data_out)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #10 clk = ~clk; // Toggle clock every 10 ns
    end

    // Test sequence
    initial begin
        // Initialize Inputs
        write_register = 2'b00;
        write_enable = 0;
        write_data = 8'h00;
        reg_write = 0;
        alu_result = 8'h00;
        alu_destination = 2'b00;

        // Case 1: No write should occur since write_enable is not asserted
        @(negedge clk);
        #20; // Wait for a clock period

        // Case 2: Write data_out with write_data since write_register does not match alu_destination
        write_enable = 1;
        reg_write = 1;
        write_data = 8'hAA;
        @(negedge clk);
        #20; // Wait for a clock period

        // Case 3: Write data_out with alu_result since write_register matches alu_destination
        alu_result = 8'h55;
        alu_destination = write_register;
        @(negedge clk);
        #20; // Wait for a clock period

        // Finish the simulation
        $finish;
    end

    // Monitor changes
    initial begin
        $monitor("At time %t, clk = %b, write_enable = %b, reg_write = %b, write_register = %b, alu_destination = %b, write_data = %h, alu_result = %h, data_out = %h",
                 $time, clk, write_enable, reg_write, write_register, alu_destination, write_data, alu_result, data_out);
    end

endmodule
