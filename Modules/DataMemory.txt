 module data_memory (
    input clk,
    input  [10:0] address, // 11-bit address for 2K memory
    input  [7:0] write_data, // Data to be written
    input  write_enable, // Write enable signal
    output reg [7:0] read_data // Data read from the memory
  );

    reg [7:0] mem[0:2047]; // 2K x 8-bit data memory

    always @(negedge clk) begin
      if (write_enable) begin
        mem[address] <= write_data; // Write to the memory if write_enable is high
      end
      read_data = mem[address]; // Read from the specified address
    end

  endmodule
  
____________________________________

`timescale 1ns / 1ps

module data_memory_tb;

  // Inputs
  reg clk;
  reg [10:0] address;
  reg [7:0] write_data;
  reg write_enable;

  // Output
  wire [7:0] read_data;

  // Instantiate the Unit Under Test (UUT)
  data_memory uut (
    .clk(clk),
    .address(address),
    .write_data(write_data),
    .write_enable(write_enable),
    .read_data(read_data)
  );

  // Clock generation
  initial begin
    clk = 0;
    forever #10 clk = ~clk; // Toggle clock every 10 ns
  end

  // Test sequence
  initial begin
    // Initialize Inputs
    address = 11'd0;
    write_data = 8'd0;
    write_enable = 1'b0;

    // Wait for the negative edge of the clock
    #5;
    
    // Case 1: Write data to address 5
    address = 11'd5;
    write_data = 8'hA5;
    write_enable = 1'b1; // Enable write
    #20; // Wait for a clock period to pass to complete the write operation
    
    write_enable = 1'b0; // Disable write
    #20; // Wait for a clock period to pass to observe the written data
    
    // Case 2: Read data from address 5
    // No need to change the address since we're reading from the same address we've written to
    #20; // Wait for a clock period to pass to read the data
    
    // Case 3: Write data to address 10
    address = 11'd10;
    write_data = 8'h3C;
    write_enable = 1'b1; // Enable write
    #20; // Wait for a clock period to pass to complete the write operation
    
    write_enable = 1'b0; // Disable write
    #20; // Wait for a clock period to pass to observe the written data

    // Case 4: Read data from address 10
    // No need to change the address since we're reading from the same address we've written to
    #20; // Wait for a clock period to pass to read the data

    // Finish the simulation
    $finish;
  end

  // Monitor changes
  initial begin
    $monitor("At time %t, clk = %b, address = %d, write_enable = %b, write_data = %h, read_data = %h",
             $time, clk, address, write_enable, write_data, read_data);
  end

endmodule

