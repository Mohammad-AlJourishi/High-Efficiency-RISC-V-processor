// OR
  module or_instruction (
    input clk,
    input [6:0] opcode,
    input [2:0] funct3,
    input [6:0] funct7,
    input [4:0] rs1,
    input [4:0] rs2,
    output reg [4:0] rd
);

    always @(negedge clk) begin
      if (opcode == 7'b0110011 && funct3 == 3'b011 && funct7 == 7'b0000000) begin
        rd = rs1 | rs2; // Perform bitwise OR and store result in rd
      end
    end
  endmodule
  




`timescale 1ns / 1ps

module or_instruction_tb;

    // Inputs
    reg clk;
    reg [6:0] opcode;
    reg [2:0] funct3;
    reg [6:0] funct7;
    reg [4:0] rs1;
    reg [4:0] rs2;

    // Output
    wire [4:0] rd;

    // Instantiate the Unit Under Test (UUT)
    or_instruction uut (
        .clk(clk), 
        .opcode(opcode), 
        .funct3(funct3), 
        .funct7(funct7), 
        .rs1(rs1), 
        .rs2(rs2), 
        .rd(rd)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #10 clk = ~clk; // Clock with period of 20ns
    end

    // Test sequence
    initial begin
        // Initialize Inputs
        opcode = 7'b0110011; // Opcode for OR instruction
        funct3 = 3'b011;     // funct3 for OR instruction
        funct7 = 7'b0000000; // funct7 for OR instruction
        rs1 = 5'b00101;      // Example value 10
        rs2 = 5'b00101;      // Example value 5

        // Wait for negedge of clk
        @(negedge clk);
        
        // Test the OR operation
        @(negedge clk); // Apply the inputs and wait for the result
        #20; // Wait for another negedge if needed

        // Change the values for another OR operation
        rs1 = 5'b11000; // Example value 24
        rs2 = 5'b00011; // Example value 3

        // Wait and observe the new output
        @(negedge clk);
        #20; // Wait for the result

        // Finish the simulation
        $finish;
    end

    // Monitor changes
    initial begin
        $monitor("Time = %t, rs1 = %d, rs2 = %d, rd = %d",
                  $time, rs1, rs2, rd);
    end

endmodule

