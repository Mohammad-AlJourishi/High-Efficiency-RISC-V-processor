//PC
module program_counter (
    input clk, // Clock signal
    input reset, // Active low Reset signal
    input [15:0] pc_in, // Input for setting the PC value
    output reg [15:0] pc_out // Output PC value
);

    always @(negedge clk or posedge reset) begin
        if (!reset) begin // Active low reset
            pc_out <= 16'b0000000000000000; // Reset the PC value to 0
        end else begin
            pc_out <= pc_in; // Set the PC value based on the input
        end
    end  
endmodule


module program_counter (
    input clk, // Clock signal
    input reset, // Active low Reset signal
    input [31:0] pc_in, // Input for setting the PC value
    output reg [31:0] pc_out // Output PC value
);

    always @(negedge clk or negedge reset) begin
        if (!reset) begin // Active low reset
            pc_out <= 32'b00000000000000000000000000000000; // Reset the PC value to 0
        end else begin
            pc_out <= pc_in; // Set the PC value based on the input
        end
    end  
endmodule

// Corrected testbench with proper reset signal handling
`timescale 1ns / 1ps

module program_counter_tb;

    // Inputs
    reg clk;
    reg reset; // Active low reset signal
  reg [31:0] pc_in;

    // Outputs
  wire [31:0] pc_out;

    // Instantiate the Unit Under Test (UUT)
    program_counter uut (
        .clk(clk), 
        .reset(reset), 
        .pc_in(pc_in), 
        .pc_out(pc_out)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #10 clk = ~clk; // Clock with period of 20ns
    end

    // Test sequence
    initial begin
        // Initialize Inputs
        reset = 0; // Assert reset
        pc_in = 0;

        // Wait for reset to take effect
        #40;

        // Release the reset
        reset = 1; #20;

        // Apply test inputs
        pc_in = 32'hAAAA;
        #40;
        pc_in = 32'h5555;
        #40;

        // Assert reset
        reset = 0; #40; // Assert reset again
        // Check if PC is reset to 0
        #20; // Wait for PC to be updated

      if (pc_out !== 32'h0000) begin
            $display("Test failed: PC did not reset to 0 at time %t", $time);
            $stop;
        end else begin
            $display("PC reset to 0 successfully at time %t", $time);
        end

        // Release reset and apply another value to see if PC updates correctly
        reset = 1; #20;
        pc_in = 32'h1234;
        #40;

        // Finish the simulation
        $finish;
    end

    // Monitor changes
    initial begin
        $monitor("At time %t, pc_in = %h | pc_out = %h",
                  $time, pc_in, pc_out);
    end

endmodule
