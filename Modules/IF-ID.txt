module if_id (
    input clk,
    input reset,
    input [31:0] pc_in,
    input [7:0] instruction, // Entire instruction from instruction_memory
    input stall_pipeline, 
    input flush_if_id,    
    output reg [31:0] pc_out,
    output reg [7:0] entire_instruction // Passing entire instruction
);

always @(negedge clk or negedge reset) begin
    if (reset || flush_if_id) begin
        pc_out <= 32'h0;
        entire_instruction <= 8'h0;
    end else if (!stall_pipeline) begin
        pc_out <= pc_in;
        entire_instruction <= instruction; // Passing entire instruction as is
    end
end

endmodule

`timescale 1ns / 1ps

module if_id_tb;

    // Inputs
    reg clk;
    reg reset;
    reg [31:0] pc_in;
    reg [7:0] instruction;
    reg stall_pipeline;
    reg flush_if_id;

    // Outputs
    wire [31:0] pc_out;
    wire [7:0] entire_instruction;

    // Instantiate the Unit Under Test (UUT)
    if_id uut (
        .clk(clk), 
        .reset(reset), 
        .pc_in(pc_in), 
        .instruction(instruction), 
        .stall_pipeline(stall_pipeline), 
        .flush_if_id(flush_if_id), 
        .pc_out(pc_out), 
        .entire_instruction(entire_instruction)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #10 clk = ~clk; // Clock with period of 20ns
    end

    // Test sequence
    initial begin
        // Initialize Inputs
        reset = 1;
        pc_in = 0;
        instruction = 0;
        stall_pipeline = 0;
        flush_if_id = 0;

        // Reset the module
        #100;
        reset = 0;

        // Provide some inputs
        pc_in = 32'h1234;
        instruction = 8'hAB; // Example instruction
        #20;

        // Simulate a stall
        stall_pipeline = 1;
        #40;
        stall_pipeline = 0;

        // Flush the IF/ID register
        flush_if_id = 1;
        #20;
        flush_if_id = 0;

        // Finish the simulation
        #100;
        $finish;
    end

    // Monitor changes
    initial begin
        $monitor("Time = %t, PC Out = %h",
                 $time, pc_out, );
    end

endmodule
