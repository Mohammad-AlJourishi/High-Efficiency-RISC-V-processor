module mem_wb (
    input clk,
    input reset,
    input [7:0] data_in,
    input [1:0] alu_destination,
    input reg_write,
    output reg [7:0] data_out
);

  always @(negedge clk or negedge reset) begin
    if (reset) begin
      data_out <= 8'h0;
    end else begin
      if (reg_write && alu_destination != 2'b00) begin
        data_out <= data_in;
      end
    end
  end
endmodule


`timescale 1ns / 1ps

module mem_wb_tb;

    // Inputs
    reg clk;
    reg reset;
    reg [7:0] data_in;
    reg [1:0] alu_destination;
    reg reg_write;

    // Outputs
    wire [7:0] data_out;

    // Instantiate the Unit Under Test (UUT)
    mem_wb uut (
        .clk(clk), 
        .reset(reset), 
        .data_in(data_in), 
        .alu_destination(alu_destination), 
        .reg_write(reg_write), 
        .data_out(data_out)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #10 clk = ~clk; // Toggle clock every 10 ns
    end

    // Test sequence
    initial begin
        // Initialize Inputs
        reset = 1;
        data_in = 0;
        alu_destination = 0;
        reg_write = 0;
        #20; // Wait 20ns

        // Change Inputs
        reset = 0;
        data_in = 8'hAA;
        alu_destination = 2'b01;
        reg_write = 1;
        #40; // Wait 40ns

        // Finish the simulation
        $finish;
    end

    // Monitor changes
    initial begin
        $monitor("At time %t, data_in = %h, data_out = %h",
                 $time, data_in, data_out);
    end

endmodule
