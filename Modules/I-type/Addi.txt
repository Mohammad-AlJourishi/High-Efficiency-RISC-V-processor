// ADDI
module addi_instruction (
    input clk,
    input [6:0] opcode,
    input [2:0] funct3,
    input [4:0] rs1,
    input [11:0] imm, // Immediate value is now 12 bits to match the RISC-V format
    output reg [4:0] rd
);

    always @(negedge clk) begin
      // Check for the ADDI opcode (0010011) and funct3 (000)
      if (opcode == 7'b0010011 && funct3 == 3'b000) begin
        // Sign-extend the immediate and perform addition, store result in rd
        rd = rs1 + {{7{imm[11]}}, imm}; // Sign-extension for the 12-bit immediate
      end else begin
        rd = 5'h00; // Default case to handle invalid opcodes
      end
    end
endmodule




`timescale 1ns / 1ps

module addi_instruction_tb;

    // Inputs
    reg clk;
    reg [6:0] opcode;
    reg [2:0] funct3;
    reg [4:0] rs1;
    reg [11:0] imm;

    // Output
    wire [4:0] rd;

    // Instantiate the Unit Under Test (UUT)
    addi_instruction uut (
        .clk(clk), 
        .opcode(opcode), 
        .funct3(funct3), 
        .rs1(rs1), 
        .imm(imm), 
        .rd(rd)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #10 clk = ~clk; // Clock with period of 20ns
    end

    // Test sequence
    initial begin
        // Initialize Inputs
        opcode = 7'b0010011; // Opcode for ADDI
        funct3 = 3'b000;     // funct3 for ADDI
        rs1 = 5'b10101;      // Example value 21
        imm = 12'h004;       // Example immediate value 4

        // Wait for the negative edge of the clock
        @(negedge clk);
        #20; // Additional delay to ensure the inputs are captured

        // Change Inputs for another ADDI operation
        rs1 = 5'b11010;      // Example value 26
        imm = 12'hFFF;       // Example immediate value -1 (2's complement)

        // Wait and observe the new output
        @(negedge clk);
        #20; // Additional delay to observe changes

        // Finish the simulation
        $finish;
    end

    // Monitor changes
    initial begin
        $monitor("Time = %t, rs1 = %d, imm = %d, rd = %d",
                  $time, rs1, imm, rd);
    end

endmodule
