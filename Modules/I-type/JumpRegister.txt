// JALR
  module jalr_instruction (
    input clk,
    input [6:0] opcode,
    input [2:0] funct3,
    input [7:0] rs1,
    input [7:0] imm,
    input [31:0] pc_in,
    output reg [31:0] pc_out,
    output reg [7:0] rd_out
  );

    always @(negedge clk) begin
      if (opcode == 7'b1100111 && funct3 == 3'b000) begin
        rd_out = pc_in + 4;
        pc_out = rs1 + imm;
      end
    end
  endmodule



`timescale 1ns / 1ps

module jalr_instruction_tb;

  // Inputs
  reg clk;
  reg [6:0] opcode;
  reg [2:0] funct3;
  reg [7:0] rs1;
  reg [7:0] imm;
  reg [31:0] pc_in;

  // Outputs
  wire [31:0] pc_out;
  wire [7:0] rd_out;

  // Instantiate the Unit Under Test (UUT)
  jalr_instruction uut (
      .clk(clk),
      .opcode(opcode),
      .funct3(funct3),
      .rs1(rs1),
      .imm(imm),
      .pc_in(pc_in),
      .pc_out(pc_out),
      .rd_out(rd_out)
  );

  // Clock generation
  initial begin
    clk = 0;
    forever #10 clk = ~clk; // Clock with a period of 20ns
  end

  // Test sequence
  initial begin
    // Initialize Inputs
    opcode = 7'b1100111; // Opcode for JALR
    funct3 = 3'b000;     // funct3 for JALR
    rs1 = 8'd10;         // Example value for rs1
    imm = 8'd4;          // Example immediate value
    pc_in = 32'd100;     // Example program counter value

    // Wait for the negative edge of the clock
    @(negedge clk);
    #40; // Additional delay to ensure the inputs are captured

    // Change Inputs for another JALR operation
    rs1 = 8'd20;         // Another example value for rs1
    imm = 8'd6;          // Another example immediate value
    pc_in = 32'd200;     // Another example program counter value

    // Wait and observe the new output
    @(negedge clk);
    #40; // Additional delay to observe changes

    // Finish the simulation
    $finish;
  end

  // Monitor changes
  initial begin
    $monitor("Time = %t, pc_in = %h, rs1 = %d, imm = %d, pc_out = %h, rd_out = %h",
              $time, pc_in, rs1, imm, pc_out, rd_out);
  end

endmodule
