module hazard_detection_unit(
    input clk,
    input [1:0] id_exe_rd, // Destination register in ID/EXE
    input id_exe_reg_write, // Reg write signal for ID/EXE
    input id_exe_mem_read, // Added: Memory read signal for ID/EXE
    input [1:0] if_id_rs1, // Source register 1 in IF/ID
    input [1:0] if_id_rs2, // Source register 2 in IF/ID
    output reg stall_pipeline, // Stall signal
    output reg flush_if_id     // Flush signal for IF/ID register
);

    always @(negedge clk) begin
        if (id_exe_mem_read && ((id_exe_rd == if_id_rs1) || (id_exe_rd == if_id_rs2))) begin
            stall_pipeline = 1'b1; // Stall pipeline for load-use hazard
            flush_if_id = 1'b1;     // Flush IF/ID pipeline register
        end else begin
            stall_pipeline = 1'b0;
            flush_if_id = 1'b0;
        end
    end
endmodule

___________________________________


`timescale 1ns / 1ps

module hazard_detection_unit_tb;

    // Inputs
    reg clk;
    reg [1:0] id_exe_rd;
    reg id_exe_reg_write;
    reg id_exe_mem_read;
    reg [1:0] if_id_rs1;
    reg [1:0] if_id_rs2;

    // Outputs
    wire stall_pipeline;
    wire flush_if_id;

    // Instantiate the Hazard Detection Unit
    hazard_detection_unit uut (
        .clk(clk),
        .id_exe_rd(id_exe_rd),
        .id_exe_reg_write(id_exe_reg_write),
        .id_exe_mem_read(id_exe_mem_read),
        .if_id_rs1(if_id_rs1),
        .if_id_rs2(if_id_rs2),
        .stall_pipeline(stall_pipeline),
        .flush_if_id(flush_if_id)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #10 clk = ~clk; // Clock with a period of 20ns
    end

    // Test sequence
    initial begin
        // Initialize Inputs
        id_exe_rd = 0;
        id_exe_reg_write = 0;
        id_exe_mem_read = 0;
        if_id_rs1 = 0;
        if_id_rs2 = 0;

        // Test Case 1: No hazard
        #20; // Wait for 20ns

        // Test Case 2: Load-use hazard scenario
        id_exe_mem_read = 1;
        id_exe_rd = 2'b01;
        if_id_rs1 = 2'b01;
        if_id_rs2 = 2'b10;
        #20; // Wait for 20ns

        // Test Case 3: Clear hazard
        id_exe_mem_read = 0;
        #20; // Wait for 20ns

        // Finish the simulation
        $finish;
    end

    // Monitor changes
    initial begin
        $monitor("At time %t, stall_pipeline = %b, flush_if_id = %b", $time, stall_pipeline, flush_if_id);
    end
endmodule